<?php

/**
 * 
 * @param type $p0 uint8_t
 * @param type $p1 uint8_t
 * @param type $p2 uint8_t
 * @param type $p3 uint8_t
 * @return type uint32_t
 */


/**
 * 
 * @param type $p0 uint8_t
 * @param type $p1 uint8_t
 * @param type $p2 uint8_t
 * @param type $p3 uint8_t
 * @param real $v uint32_t
 */


$sigma = array(
    array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15),
    array(14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3),
    array(11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4),
    array(7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8),
    array(9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13),
    array(2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9),
    array(12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11),
    array(13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10),
    array(6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5),
    array(10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0),
    array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15),
    array(14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3),
    array(11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4),
    array(7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8)
);

$cst = array(
    0x243F6A88, 0x85A308D3, 0x13198A2E, 0x03707344,
    0xA4093822, 0x299F31D0, 0x082EFA98, 0xEC4E6C89,
    0x452821E6, 0x38D01377, 0xBE5466CF, 0x34E90C6C,
    0xC0AC29B7, 0xC97C50DD, 0x3F84D5B5, 0xB5470917
);

$padding = array(
    0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
);

final class state {

    /**
     *
     * @var uint32_t 
     */
    public $h = array();

    /**
     *
     * @var uint32_t 
     */
    public $s = array();

    /**
     *
     * @var uint32_t 
     */
    public $t = array();

    /**
     *
     * @var int
     */
    public $buflen;

    /**
     *
     * @var int
     */
    public $nullt;

    /**
     *
     * @var uint8_t
     */
    public $buf;

    public function __construct() {
        $this->h = array_fill(0, 8, 0);
        $this->s = array_fill(0, 4, 0);
        $this->t = array_fill(0, 2, 0);

        $this->buf = array_fill(0, 64, 0);
    }

}

/**
 * 
 * @param type $x uint32_t
 * @param type $n uint8_t
 * @return type uint32_t
 */
#function RO T($x, $n) {
#    $x &= 0xffffffff;
#    return ($x << (32 - $n)) | ($x >> $n) & 0xffffffff;
#}




/**
 * 
 * @param state $S state *S
 * @param array $block const uint8_t *block
 */


/**
 * 
 * @param state $S state *S
 */
function blake256_init(state $S) {
    $S->h[0] = 0x6A09E667;
    $S->h[1] = 0xBB67AE85;
    $S->h[2] = 0x3C6EF372;
    $S->h[3] = 0xA54FF53A;
    $S->h[4] = 0x510E527F;
    $S->h[5] = 0x9B05688C;
    $S->h[6] = 0x1F83D9AB;
    $S->h[7] = 0x5BE0CD19;
    $S->t[0] = $S->t[1] = $S->buflen = $S->nullt = 0;
    $S->s[0] = $S->s[1] = $S->s[2] = $S->s[3] = 0;
}

/**
 * 
 * @param state $S state *S
 * @param array $data const uint8_t *data
 * @param uint64 $datalen uint64_t datalen = number of bits
 */
function blake256_update(state $S, array $data, $datalen) {

    /* int */$left = $S->buflen >> 3;
    /* int */ $fill = 64 - $left;

    if ($left && ((($datalen >> 3) & 0x3F) >= /* (unsigned) */$fill)) {
        #memcpy((void *) (S->buf + left), (void *) data, fill);
        for ($x = 0; $x < $fill; ++$x)
            $S->buf[$x + $left] = $data[$x];

        $S->t[0] += 512;
        if ($S->t[0] == 0)
            $S->t[1] ++;
        

    #global $sigma, $cst;
    //uint32_t v[16], m[16], i;
    $v = array_fill(0, 16, 0);
    $m = array_fill(0, 16, 0);
    #$i = 0;

    for ($i = 0, $p = 0; $i < 16 && $p < 64;)
        $m[$i++] = 

     ((($S->buf[$p++] & 0xff) << 24) | (($S->buf[$p++] & 0xff) << 16) |
            (($S->buf[$p++] & 0xff) << 8) | ($S->buf[$p++] & 0xff)) & 0xffffffff;


    for ($i = 0; $i < 8; ++$i) {
        $v[$i] = $S->h[$i];
    }/* END unroll */

    $v[8] = $S->s[0] ^ 0x243F6A88;
    $v[9] = $S->s[1] ^ 0x85A308D3;
    $v[10] = $S->s[2] ^ 0x13198A2E;
    $v[11] = $S->s[3] ^ 0x03707344;
    $v[12] = 0xA4093822;
    $v[13] = 0x299F31D0;
    $v[14] = 0x082EFA98;
    $v[15] = 0xEC4E6C89;

    if ($S->nullt == 0) {
        $v[12] ^= $S->t[0];
        $v[13] ^= $S->t[0];
        $v[14] ^= $S->t[1];
        $v[15] ^= $S->t[1];
    }

    $i=0;
global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][0]] ^ $cst[$sigma[$i][0 + 1]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 16)) | ($v[12] ^ $v[0] >> 16) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 12)) | ($v[4] ^ $v[8] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][0 + 1]] ^ $cst[$sigma[$i][0]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 8)) | ($v[12] ^ $v[0] >> 8) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 7)) | ($v[4] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][2]] ^ $cst[$sigma[$i][2 + 1]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 16)) | ($v[13] ^ $v[1] >> 16) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 12)) | ($v[5] ^ $v[9] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][2 + 1]] ^ $cst[$sigma[$i][2]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 8)) | ($v[13] ^ $v[1] >> 8) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 7)) | ($v[5] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][4]] ^ $cst[$sigma[$i][4 + 1]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 16)) | ($v[14] ^ $v[2] >> 16) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 12)) | ($v[6] ^ $v[10] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][4 + 1]] ^ $cst[$sigma[$i][4]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 8)) | ($v[14] ^ $v[2] >> 8) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 7)) | ($v[6] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][6]] ^ $cst[$sigma[$i][6 + 1]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 16)) | ($v[15] ^ $v[3] >> 16) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 12)) | ($v[7] ^ $v[11] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][6 + 1]] ^ $cst[$sigma[$i][6]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 8)) | ($v[15] ^ $v[3] >> 8) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 7)) | ($v[7] ^ $v[11] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][14]] ^ $cst[$sigma[$i][14 + 1]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 16)) | ($v[14] ^ $v[3] >> 16) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 12)) | ($v[4] ^ $v[9] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][14 + 1]] ^ $cst[$sigma[$i][14]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 8)) | ($v[14] ^ $v[3] >> 8) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 7)) | ($v[4] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][12]] ^ $cst[$sigma[$i][12 + 1]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 16)) | ($v[13] ^ $v[2] >> 16) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 12)) | ($v[7] ^ $v[8] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][12 + 1]] ^ $cst[$sigma[$i][12]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 8)) | ($v[13] ^ $v[2] >> 8) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 7)) | ($v[7] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][8]] ^ $cst[$sigma[$i][8 + 1]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 16)) | ($v[15] ^ $v[0] >> 16) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 12)) | ($v[5] ^ $v[10] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][8 + 1]] ^ $cst[$sigma[$i][8]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 8)) | ($v[15] ^ $v[0] >> 8) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 7)) | ($v[5] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][10]] ^ $cst[$sigma[$i][10 + 1]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 16)) | ($v[12] ^ $v[1] >> 16) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 12)) | ($v[6] ^ $v[11] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][10 + 1]] ^ $cst[$sigma[$i][10]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 8)) | ($v[12] ^ $v[1] >> 8) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 7)) | ($v[6] ^ $v[11] >> 7) & 0xffffffff;

$i=1;
global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][0]] ^ $cst[$sigma[$i][0 + 1]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 16)) | ($v[12] ^ $v[0] >> 16) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 12)) | ($v[4] ^ $v[8] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][0 + 1]] ^ $cst[$sigma[$i][0]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 8)) | ($v[12] ^ $v[0] >> 8) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 7)) | ($v[4] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][2]] ^ $cst[$sigma[$i][2 + 1]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 16)) | ($v[13] ^ $v[1] >> 16) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 12)) | ($v[5] ^ $v[9] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][2 + 1]] ^ $cst[$sigma[$i][2]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 8)) | ($v[13] ^ $v[1] >> 8) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 7)) | ($v[5] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][4]] ^ $cst[$sigma[$i][4 + 1]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 16)) | ($v[14] ^ $v[2] >> 16) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 12)) | ($v[6] ^ $v[10] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][4 + 1]] ^ $cst[$sigma[$i][4]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 8)) | ($v[14] ^ $v[2] >> 8) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 7)) | ($v[6] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][6]] ^ $cst[$sigma[$i][6 + 1]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 16)) | ($v[15] ^ $v[3] >> 16) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 12)) | ($v[7] ^ $v[11] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][6 + 1]] ^ $cst[$sigma[$i][6]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 8)) | ($v[15] ^ $v[3] >> 8) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 7)) | ($v[7] ^ $v[11] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][14]] ^ $cst[$sigma[$i][14 + 1]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 16)) | ($v[14] ^ $v[3] >> 16) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 12)) | ($v[4] ^ $v[9] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][14 + 1]] ^ $cst[$sigma[$i][14]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 8)) | ($v[14] ^ $v[3] >> 8) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 7)) | ($v[4] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][12]] ^ $cst[$sigma[$i][12 + 1]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 16)) | ($v[13] ^ $v[2] >> 16) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 12)) | ($v[7] ^ $v[8] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][12 + 1]] ^ $cst[$sigma[$i][12]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 8)) | ($v[13] ^ $v[2] >> 8) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 7)) | ($v[7] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][8]] ^ $cst[$sigma[$i][8 + 1]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 16)) | ($v[15] ^ $v[0] >> 16) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 12)) | ($v[5] ^ $v[10] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][8 + 1]] ^ $cst[$sigma[$i][8]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 8)) | ($v[15] ^ $v[0] >> 8) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 7)) | ($v[5] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][10]] ^ $cst[$sigma[$i][10 + 1]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 16)) | ($v[12] ^ $v[1] >> 16) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 12)) | ($v[6] ^ $v[11] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][10 + 1]] ^ $cst[$sigma[$i][10]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 8)) | ($v[12] ^ $v[1] >> 8) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 7)) | ($v[6] ^ $v[11] >> 7) & 0xffffffff;

$i=2;
global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][0]] ^ $cst[$sigma[$i][0 + 1]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 16)) | ($v[12] ^ $v[0] >> 16) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 12)) | ($v[4] ^ $v[8] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][0 + 1]] ^ $cst[$sigma[$i][0]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 8)) | ($v[12] ^ $v[0] >> 8) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 7)) | ($v[4] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][2]] ^ $cst[$sigma[$i][2 + 1]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 16)) | ($v[13] ^ $v[1] >> 16) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 12)) | ($v[5] ^ $v[9] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][2 + 1]] ^ $cst[$sigma[$i][2]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 8)) | ($v[13] ^ $v[1] >> 8) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 7)) | ($v[5] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][4]] ^ $cst[$sigma[$i][4 + 1]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 16)) | ($v[14] ^ $v[2] >> 16) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 12)) | ($v[6] ^ $v[10] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][4 + 1]] ^ $cst[$sigma[$i][4]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 8)) | ($v[14] ^ $v[2] >> 8) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 7)) | ($v[6] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][6]] ^ $cst[$sigma[$i][6 + 1]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 16)) | ($v[15] ^ $v[3] >> 16) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 12)) | ($v[7] ^ $v[11] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][6 + 1]] ^ $cst[$sigma[$i][6]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 8)) | ($v[15] ^ $v[3] >> 8) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 7)) | ($v[7] ^ $v[11] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][14]] ^ $cst[$sigma[$i][14 + 1]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 16)) | ($v[14] ^ $v[3] >> 16) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 12)) | ($v[4] ^ $v[9] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][14 + 1]] ^ $cst[$sigma[$i][14]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 8)) | ($v[14] ^ $v[3] >> 8) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 7)) | ($v[4] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][12]] ^ $cst[$sigma[$i][12 + 1]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 16)) | ($v[13] ^ $v[2] >> 16) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 12)) | ($v[7] ^ $v[8] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][12 + 1]] ^ $cst[$sigma[$i][12]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 8)) | ($v[13] ^ $v[2] >> 8) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 7)) | ($v[7] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][8]] ^ $cst[$sigma[$i][8 + 1]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 16)) | ($v[15] ^ $v[0] >> 16) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 12)) | ($v[5] ^ $v[10] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][8 + 1]] ^ $cst[$sigma[$i][8]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 8)) | ($v[15] ^ $v[0] >> 8) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 7)) | ($v[5] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][10]] ^ $cst[$sigma[$i][10 + 1]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 16)) | ($v[12] ^ $v[1] >> 16) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 12)) | ($v[6] ^ $v[11] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][10 + 1]] ^ $cst[$sigma[$i][10]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 8)) | ($v[12] ^ $v[1] >> 8) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 7)) | ($v[6] ^ $v[11] >> 7) & 0xffffffff;

$i=3;
global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][0]] ^ $cst[$sigma[$i][0 + 1]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 16)) | ($v[12] ^ $v[0] >> 16) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 12)) | ($v[4] ^ $v[8] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][0 + 1]] ^ $cst[$sigma[$i][0]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 8)) | ($v[12] ^ $v[0] >> 8) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 7)) | ($v[4] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][2]] ^ $cst[$sigma[$i][2 + 1]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 16)) | ($v[13] ^ $v[1] >> 16) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 12)) | ($v[5] ^ $v[9] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][2 + 1]] ^ $cst[$sigma[$i][2]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 8)) | ($v[13] ^ $v[1] >> 8) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 7)) | ($v[5] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][4]] ^ $cst[$sigma[$i][4 + 1]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 16)) | ($v[14] ^ $v[2] >> 16) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 12)) | ($v[6] ^ $v[10] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][4 + 1]] ^ $cst[$sigma[$i][4]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 8)) | ($v[14] ^ $v[2] >> 8) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 7)) | ($v[6] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][6]] ^ $cst[$sigma[$i][6 + 1]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 16)) | ($v[15] ^ $v[3] >> 16) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 12)) | ($v[7] ^ $v[11] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][6 + 1]] ^ $cst[$sigma[$i][6]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 8)) | ($v[15] ^ $v[3] >> 8) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 7)) | ($v[7] ^ $v[11] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][14]] ^ $cst[$sigma[$i][14 + 1]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 16)) | ($v[14] ^ $v[3] >> 16) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 12)) | ($v[4] ^ $v[9] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][14 + 1]] ^ $cst[$sigma[$i][14]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 8)) | ($v[14] ^ $v[3] >> 8) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 7)) | ($v[4] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][12]] ^ $cst[$sigma[$i][12 + 1]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 16)) | ($v[13] ^ $v[2] >> 16) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 12)) | ($v[7] ^ $v[8] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][12 + 1]] ^ $cst[$sigma[$i][12]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 8)) | ($v[13] ^ $v[2] >> 8) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 7)) | ($v[7] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][8]] ^ $cst[$sigma[$i][8 + 1]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 16)) | ($v[15] ^ $v[0] >> 16) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 12)) | ($v[5] ^ $v[10] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][8 + 1]] ^ $cst[$sigma[$i][8]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 8)) | ($v[15] ^ $v[0] >> 8) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 7)) | ($v[5] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][10]] ^ $cst[$sigma[$i][10 + 1]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 16)) | ($v[12] ^ $v[1] >> 16) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 12)) | ($v[6] ^ $v[11] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][10 + 1]] ^ $cst[$sigma[$i][10]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 8)) | ($v[12] ^ $v[1] >> 8) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 7)) | ($v[6] ^ $v[11] >> 7) & 0xffffffff;

$i=4;
global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][0]] ^ $cst[$sigma[$i][0 + 1]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 16)) | ($v[12] ^ $v[0] >> 16) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 12)) | ($v[4] ^ $v[8] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][0 + 1]] ^ $cst[$sigma[$i][0]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 8)) | ($v[12] ^ $v[0] >> 8) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 7)) | ($v[4] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][2]] ^ $cst[$sigma[$i][2 + 1]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 16)) | ($v[13] ^ $v[1] >> 16) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 12)) | ($v[5] ^ $v[9] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][2 + 1]] ^ $cst[$sigma[$i][2]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 8)) | ($v[13] ^ $v[1] >> 8) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 7)) | ($v[5] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][4]] ^ $cst[$sigma[$i][4 + 1]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 16)) | ($v[14] ^ $v[2] >> 16) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 12)) | ($v[6] ^ $v[10] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][4 + 1]] ^ $cst[$sigma[$i][4]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 8)) | ($v[14] ^ $v[2] >> 8) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 7)) | ($v[6] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][6]] ^ $cst[$sigma[$i][6 + 1]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 16)) | ($v[15] ^ $v[3] >> 16) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 12)) | ($v[7] ^ $v[11] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][6 + 1]] ^ $cst[$sigma[$i][6]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 8)) | ($v[15] ^ $v[3] >> 8) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 7)) | ($v[7] ^ $v[11] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][14]] ^ $cst[$sigma[$i][14 + 1]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 16)) | ($v[14] ^ $v[3] >> 16) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 12)) | ($v[4] ^ $v[9] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][14 + 1]] ^ $cst[$sigma[$i][14]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 8)) | ($v[14] ^ $v[3] >> 8) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 7)) | ($v[4] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][12]] ^ $cst[$sigma[$i][12 + 1]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 16)) | ($v[13] ^ $v[2] >> 16) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 12)) | ($v[7] ^ $v[8] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][12 + 1]] ^ $cst[$sigma[$i][12]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 8)) | ($v[13] ^ $v[2] >> 8) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 7)) | ($v[7] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][8]] ^ $cst[$sigma[$i][8 + 1]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 16)) | ($v[15] ^ $v[0] >> 16) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 12)) | ($v[5] ^ $v[10] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][8 + 1]] ^ $cst[$sigma[$i][8]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 8)) | ($v[15] ^ $v[0] >> 8) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 7)) | ($v[5] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][10]] ^ $cst[$sigma[$i][10 + 1]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 16)) | ($v[12] ^ $v[1] >> 16) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 12)) | ($v[6] ^ $v[11] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][10 + 1]] ^ $cst[$sigma[$i][10]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 8)) | ($v[12] ^ $v[1] >> 8) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 7)) | ($v[6] ^ $v[11] >> 7) & 0xffffffff;

$i=5;
global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][0]] ^ $cst[$sigma[$i][0 + 1]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 16)) | ($v[12] ^ $v[0] >> 16) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 12)) | ($v[4] ^ $v[8] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][0 + 1]] ^ $cst[$sigma[$i][0]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 8)) | ($v[12] ^ $v[0] >> 8) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 7)) | ($v[4] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][2]] ^ $cst[$sigma[$i][2 + 1]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 16)) | ($v[13] ^ $v[1] >> 16) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 12)) | ($v[5] ^ $v[9] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][2 + 1]] ^ $cst[$sigma[$i][2]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 8)) | ($v[13] ^ $v[1] >> 8) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 7)) | ($v[5] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][4]] ^ $cst[$sigma[$i][4 + 1]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 16)) | ($v[14] ^ $v[2] >> 16) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 12)) | ($v[6] ^ $v[10] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][4 + 1]] ^ $cst[$sigma[$i][4]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 8)) | ($v[14] ^ $v[2] >> 8) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 7)) | ($v[6] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][6]] ^ $cst[$sigma[$i][6 + 1]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 16)) | ($v[15] ^ $v[3] >> 16) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 12)) | ($v[7] ^ $v[11] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][6 + 1]] ^ $cst[$sigma[$i][6]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 8)) | ($v[15] ^ $v[3] >> 8) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 7)) | ($v[7] ^ $v[11] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][14]] ^ $cst[$sigma[$i][14 + 1]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 16)) | ($v[14] ^ $v[3] >> 16) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 12)) | ($v[4] ^ $v[9] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][14 + 1]] ^ $cst[$sigma[$i][14]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 8)) | ($v[14] ^ $v[3] >> 8) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 7)) | ($v[4] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][12]] ^ $cst[$sigma[$i][12 + 1]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 16)) | ($v[13] ^ $v[2] >> 16) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 12)) | ($v[7] ^ $v[8] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][12 + 1]] ^ $cst[$sigma[$i][12]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 8)) | ($v[13] ^ $v[2] >> 8) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 7)) | ($v[7] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][8]] ^ $cst[$sigma[$i][8 + 1]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 16)) | ($v[15] ^ $v[0] >> 16) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 12)) | ($v[5] ^ $v[10] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][8 + 1]] ^ $cst[$sigma[$i][8]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 8)) | ($v[15] ^ $v[0] >> 8) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 7)) | ($v[5] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][10]] ^ $cst[$sigma[$i][10 + 1]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 16)) | ($v[12] ^ $v[1] >> 16) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 12)) | ($v[6] ^ $v[11] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][10 + 1]] ^ $cst[$sigma[$i][10]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 8)) | ($v[12] ^ $v[1] >> 8) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 7)) | ($v[6] ^ $v[11] >> 7) & 0xffffffff;

$i=6;
global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][0]] ^ $cst[$sigma[$i][0 + 1]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 16)) | ($v[12] ^ $v[0] >> 16) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 12)) | ($v[4] ^ $v[8] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][0 + 1]] ^ $cst[$sigma[$i][0]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 8)) | ($v[12] ^ $v[0] >> 8) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 7)) | ($v[4] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][2]] ^ $cst[$sigma[$i][2 + 1]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 16)) | ($v[13] ^ $v[1] >> 16) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 12)) | ($v[5] ^ $v[9] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][2 + 1]] ^ $cst[$sigma[$i][2]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 8)) | ($v[13] ^ $v[1] >> 8) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 7)) | ($v[5] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][4]] ^ $cst[$sigma[$i][4 + 1]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 16)) | ($v[14] ^ $v[2] >> 16) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 12)) | ($v[6] ^ $v[10] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][4 + 1]] ^ $cst[$sigma[$i][4]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 8)) | ($v[14] ^ $v[2] >> 8) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 7)) | ($v[6] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][6]] ^ $cst[$sigma[$i][6 + 1]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 16)) | ($v[15] ^ $v[3] >> 16) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 12)) | ($v[7] ^ $v[11] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][6 + 1]] ^ $cst[$sigma[$i][6]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 8)) | ($v[15] ^ $v[3] >> 8) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 7)) | ($v[7] ^ $v[11] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][14]] ^ $cst[$sigma[$i][14 + 1]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 16)) | ($v[14] ^ $v[3] >> 16) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 12)) | ($v[4] ^ $v[9] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][14 + 1]] ^ $cst[$sigma[$i][14]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 8)) | ($v[14] ^ $v[3] >> 8) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 7)) | ($v[4] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][12]] ^ $cst[$sigma[$i][12 + 1]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 16)) | ($v[13] ^ $v[2] >> 16) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 12)) | ($v[7] ^ $v[8] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][12 + 1]] ^ $cst[$sigma[$i][12]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 8)) | ($v[13] ^ $v[2] >> 8) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 7)) | ($v[7] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][8]] ^ $cst[$sigma[$i][8 + 1]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 16)) | ($v[15] ^ $v[0] >> 16) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 12)) | ($v[5] ^ $v[10] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][8 + 1]] ^ $cst[$sigma[$i][8]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 8)) | ($v[15] ^ $v[0] >> 8) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 7)) | ($v[5] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][10]] ^ $cst[$sigma[$i][10 + 1]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 16)) | ($v[12] ^ $v[1] >> 16) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 12)) | ($v[6] ^ $v[11] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][10 + 1]] ^ $cst[$sigma[$i][10]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 8)) | ($v[12] ^ $v[1] >> 8) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 7)) | ($v[6] ^ $v[11] >> 7) & 0xffffffff;

$i=7;
global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][0]] ^ $cst[$sigma[$i][0 + 1]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 16)) | ($v[12] ^ $v[0] >> 16) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 12)) | ($v[4] ^ $v[8] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][0 + 1]] ^ $cst[$sigma[$i][0]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 8)) | ($v[12] ^ $v[0] >> 8) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 7)) | ($v[4] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][2]] ^ $cst[$sigma[$i][2 + 1]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 16)) | ($v[13] ^ $v[1] >> 16) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 12)) | ($v[5] ^ $v[9] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][2 + 1]] ^ $cst[$sigma[$i][2]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 8)) | ($v[13] ^ $v[1] >> 8) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 7)) | ($v[5] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][4]] ^ $cst[$sigma[$i][4 + 1]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 16)) | ($v[14] ^ $v[2] >> 16) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 12)) | ($v[6] ^ $v[10] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][4 + 1]] ^ $cst[$sigma[$i][4]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 8)) | ($v[14] ^ $v[2] >> 8) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 7)) | ($v[6] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][6]] ^ $cst[$sigma[$i][6 + 1]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 16)) | ($v[15] ^ $v[3] >> 16) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 12)) | ($v[7] ^ $v[11] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][6 + 1]] ^ $cst[$sigma[$i][6]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 8)) | ($v[15] ^ $v[3] >> 8) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 7)) | ($v[7] ^ $v[11] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][14]] ^ $cst[$sigma[$i][14 + 1]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 16)) | ($v[14] ^ $v[3] >> 16) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 12)) | ($v[4] ^ $v[9] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][14 + 1]] ^ $cst[$sigma[$i][14]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 8)) | ($v[14] ^ $v[3] >> 8) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 7)) | ($v[4] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][12]] ^ $cst[$sigma[$i][12 + 1]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 16)) | ($v[13] ^ $v[2] >> 16) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 12)) | ($v[7] ^ $v[8] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][12 + 1]] ^ $cst[$sigma[$i][12]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 8)) | ($v[13] ^ $v[2] >> 8) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 7)) | ($v[7] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][8]] ^ $cst[$sigma[$i][8 + 1]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 16)) | ($v[15] ^ $v[0] >> 16) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 12)) | ($v[5] ^ $v[10] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][8 + 1]] ^ $cst[$sigma[$i][8]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 8)) | ($v[15] ^ $v[0] >> 8) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 7)) | ($v[5] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][10]] ^ $cst[$sigma[$i][10 + 1]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 16)) | ($v[12] ^ $v[1] >> 16) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 12)) | ($v[6] ^ $v[11] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][10 + 1]] ^ $cst[$sigma[$i][10]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 8)) | ($v[12] ^ $v[1] >> 8) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 7)) | ($v[6] ^ $v[11] >> 7) & 0xffffffff;

$i=8;
global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][0]] ^ $cst[$sigma[$i][0 + 1]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 16)) | ($v[12] ^ $v[0] >> 16) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 12)) | ($v[4] ^ $v[8] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][0 + 1]] ^ $cst[$sigma[$i][0]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 8)) | ($v[12] ^ $v[0] >> 8) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 7)) | ($v[4] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][2]] ^ $cst[$sigma[$i][2 + 1]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 16)) | ($v[13] ^ $v[1] >> 16) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 12)) | ($v[5] ^ $v[9] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][2 + 1]] ^ $cst[$sigma[$i][2]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 8)) | ($v[13] ^ $v[1] >> 8) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 7)) | ($v[5] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][4]] ^ $cst[$sigma[$i][4 + 1]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 16)) | ($v[14] ^ $v[2] >> 16) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 12)) | ($v[6] ^ $v[10] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][4 + 1]] ^ $cst[$sigma[$i][4]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 8)) | ($v[14] ^ $v[2] >> 8) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 7)) | ($v[6] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][6]] ^ $cst[$sigma[$i][6 + 1]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 16)) | ($v[15] ^ $v[3] >> 16) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 12)) | ($v[7] ^ $v[11] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][6 + 1]] ^ $cst[$sigma[$i][6]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 8)) | ($v[15] ^ $v[3] >> 8) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 7)) | ($v[7] ^ $v[11] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][14]] ^ $cst[$sigma[$i][14 + 1]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 16)) | ($v[14] ^ $v[3] >> 16) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 12)) | ($v[4] ^ $v[9] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][14 + 1]] ^ $cst[$sigma[$i][14]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 8)) | ($v[14] ^ $v[3] >> 8) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 7)) | ($v[4] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][12]] ^ $cst[$sigma[$i][12 + 1]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 16)) | ($v[13] ^ $v[2] >> 16) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 12)) | ($v[7] ^ $v[8] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][12 + 1]] ^ $cst[$sigma[$i][12]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 8)) | ($v[13] ^ $v[2] >> 8) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 7)) | ($v[7] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][8]] ^ $cst[$sigma[$i][8 + 1]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 16)) | ($v[15] ^ $v[0] >> 16) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 12)) | ($v[5] ^ $v[10] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][8 + 1]] ^ $cst[$sigma[$i][8]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 8)) | ($v[15] ^ $v[0] >> 8) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 7)) | ($v[5] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][10]] ^ $cst[$sigma[$i][10 + 1]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 16)) | ($v[12] ^ $v[1] >> 16) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 12)) | ($v[6] ^ $v[11] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][10 + 1]] ^ $cst[$sigma[$i][10]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 8)) | ($v[12] ^ $v[1] >> 8) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 7)) | ($v[6] ^ $v[11] >> 7) & 0xffffffff;

$i=9;
global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][0]] ^ $cst[$sigma[$i][0 + 1]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 16)) | ($v[12] ^ $v[0] >> 16) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 12)) | ($v[4] ^ $v[8] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][0 + 1]] ^ $cst[$sigma[$i][0]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 8)) | ($v[12] ^ $v[0] >> 8) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 7)) | ($v[4] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][2]] ^ $cst[$sigma[$i][2 + 1]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 16)) | ($v[13] ^ $v[1] >> 16) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 12)) | ($v[5] ^ $v[9] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][2 + 1]] ^ $cst[$sigma[$i][2]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 8)) | ($v[13] ^ $v[1] >> 8) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 7)) | ($v[5] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][4]] ^ $cst[$sigma[$i][4 + 1]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 16)) | ($v[14] ^ $v[2] >> 16) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 12)) | ($v[6] ^ $v[10] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][4 + 1]] ^ $cst[$sigma[$i][4]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 8)) | ($v[14] ^ $v[2] >> 8) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 7)) | ($v[6] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][6]] ^ $cst[$sigma[$i][6 + 1]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 16)) | ($v[15] ^ $v[3] >> 16) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 12)) | ($v[7] ^ $v[11] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][6 + 1]] ^ $cst[$sigma[$i][6]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 8)) | ($v[15] ^ $v[3] >> 8) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 7)) | ($v[7] ^ $v[11] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][14]] ^ $cst[$sigma[$i][14 + 1]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 16)) | ($v[14] ^ $v[3] >> 16) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 12)) | ($v[4] ^ $v[9] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][14 + 1]] ^ $cst[$sigma[$i][14]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 8)) | ($v[14] ^ $v[3] >> 8) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 7)) | ($v[4] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][12]] ^ $cst[$sigma[$i][12 + 1]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 16)) | ($v[13] ^ $v[2] >> 16) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 12)) | ($v[7] ^ $v[8] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][12 + 1]] ^ $cst[$sigma[$i][12]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 8)) | ($v[13] ^ $v[2] >> 8) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 7)) | ($v[7] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][8]] ^ $cst[$sigma[$i][8 + 1]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 16)) | ($v[15] ^ $v[0] >> 16) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 12)) | ($v[5] ^ $v[10] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][8 + 1]] ^ $cst[$sigma[$i][8]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 8)) | ($v[15] ^ $v[0] >> 8) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 7)) | ($v[5] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][10]] ^ $cst[$sigma[$i][10 + 1]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 16)) | ($v[12] ^ $v[1] >> 16) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 12)) | ($v[6] ^ $v[11] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][10 + 1]] ^ $cst[$sigma[$i][10]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 8)) | ($v[12] ^ $v[1] >> 8) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 7)) | ($v[6] ^ $v[11] >> 7) & 0xffffffff;

$i=10;
global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][0]] ^ $cst[$sigma[$i][0 + 1]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 16)) | ($v[12] ^ $v[0] >> 16) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 12)) | ($v[4] ^ $v[8] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][0 + 1]] ^ $cst[$sigma[$i][0]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 8)) | ($v[12] ^ $v[0] >> 8) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 7)) | ($v[4] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][2]] ^ $cst[$sigma[$i][2 + 1]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 16)) | ($v[13] ^ $v[1] >> 16) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 12)) | ($v[5] ^ $v[9] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][2 + 1]] ^ $cst[$sigma[$i][2]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 8)) | ($v[13] ^ $v[1] >> 8) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 7)) | ($v[5] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][4]] ^ $cst[$sigma[$i][4 + 1]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 16)) | ($v[14] ^ $v[2] >> 16) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 12)) | ($v[6] ^ $v[10] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][4 + 1]] ^ $cst[$sigma[$i][4]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 8)) | ($v[14] ^ $v[2] >> 8) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 7)) | ($v[6] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][6]] ^ $cst[$sigma[$i][6 + 1]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 16)) | ($v[15] ^ $v[3] >> 16) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 12)) | ($v[7] ^ $v[11] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][6 + 1]] ^ $cst[$sigma[$i][6]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 8)) | ($v[15] ^ $v[3] >> 8) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 7)) | ($v[7] ^ $v[11] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][14]] ^ $cst[$sigma[$i][14 + 1]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 16)) | ($v[14] ^ $v[3] >> 16) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 12)) | ($v[4] ^ $v[9] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][14 + 1]] ^ $cst[$sigma[$i][14]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 8)) | ($v[14] ^ $v[3] >> 8) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 7)) | ($v[4] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][12]] ^ $cst[$sigma[$i][12 + 1]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 16)) | ($v[13] ^ $v[2] >> 16) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 12)) | ($v[7] ^ $v[8] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][12 + 1]] ^ $cst[$sigma[$i][12]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 8)) | ($v[13] ^ $v[2] >> 8) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 7)) | ($v[7] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][8]] ^ $cst[$sigma[$i][8 + 1]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 16)) | ($v[15] ^ $v[0] >> 16) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 12)) | ($v[5] ^ $v[10] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][8 + 1]] ^ $cst[$sigma[$i][8]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 8)) | ($v[15] ^ $v[0] >> 8) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 7)) | ($v[5] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][10]] ^ $cst[$sigma[$i][10 + 1]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 16)) | ($v[12] ^ $v[1] >> 16) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 12)) | ($v[6] ^ $v[11] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][10 + 1]] ^ $cst[$sigma[$i][10]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 8)) | ($v[12] ^ $v[1] >> 8) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 7)) | ($v[6] ^ $v[11] >> 7) & 0xffffffff;

$i=11;
global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][0]] ^ $cst[$sigma[$i][0 + 1]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 16)) | ($v[12] ^ $v[0] >> 16) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 12)) | ($v[4] ^ $v[8] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][0 + 1]] ^ $cst[$sigma[$i][0]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 8)) | ($v[12] ^ $v[0] >> 8) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 7)) | ($v[4] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][2]] ^ $cst[$sigma[$i][2 + 1]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 16)) | ($v[13] ^ $v[1] >> 16) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 12)) | ($v[5] ^ $v[9] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][2 + 1]] ^ $cst[$sigma[$i][2]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 8)) | ($v[13] ^ $v[1] >> 8) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 7)) | ($v[5] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][4]] ^ $cst[$sigma[$i][4 + 1]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 16)) | ($v[14] ^ $v[2] >> 16) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 12)) | ($v[6] ^ $v[10] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][4 + 1]] ^ $cst[$sigma[$i][4]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 8)) | ($v[14] ^ $v[2] >> 8) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 7)) | ($v[6] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][6]] ^ $cst[$sigma[$i][6 + 1]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 16)) | ($v[15] ^ $v[3] >> 16) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 12)) | ($v[7] ^ $v[11] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][6 + 1]] ^ $cst[$sigma[$i][6]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 8)) | ($v[15] ^ $v[3] >> 8) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 7)) | ($v[7] ^ $v[11] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][14]] ^ $cst[$sigma[$i][14 + 1]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 16)) | ($v[14] ^ $v[3] >> 16) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 12)) | ($v[4] ^ $v[9] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][14 + 1]] ^ $cst[$sigma[$i][14]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 8)) | ($v[14] ^ $v[3] >> 8) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 7)) | ($v[4] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][12]] ^ $cst[$sigma[$i][12 + 1]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 16)) | ($v[13] ^ $v[2] >> 16) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 12)) | ($v[7] ^ $v[8] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][12 + 1]] ^ $cst[$sigma[$i][12]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 8)) | ($v[13] ^ $v[2] >> 8) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 7)) | ($v[7] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][8]] ^ $cst[$sigma[$i][8 + 1]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 16)) | ($v[15] ^ $v[0] >> 16) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 12)) | ($v[5] ^ $v[10] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][8 + 1]] ^ $cst[$sigma[$i][8]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 8)) | ($v[15] ^ $v[0] >> 8) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 7)) | ($v[5] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][10]] ^ $cst[$sigma[$i][10 + 1]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 16)) | ($v[12] ^ $v[1] >> 16) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 12)) | ($v[6] ^ $v[11] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][10 + 1]] ^ $cst[$sigma[$i][10]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 8)) | ($v[12] ^ $v[1] >> 8) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 7)) | ($v[6] ^ $v[11] >> 7) & 0xffffffff;

$i=12;
global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][0]] ^ $cst[$sigma[$i][0 + 1]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 16)) | ($v[12] ^ $v[0] >> 16) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 12)) | ($v[4] ^ $v[8] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][0 + 1]] ^ $cst[$sigma[$i][0]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 8)) | ($v[12] ^ $v[0] >> 8) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 7)) | ($v[4] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][2]] ^ $cst[$sigma[$i][2 + 1]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 16)) | ($v[13] ^ $v[1] >> 16) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 12)) | ($v[5] ^ $v[9] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][2 + 1]] ^ $cst[$sigma[$i][2]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 8)) | ($v[13] ^ $v[1] >> 8) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 7)) | ($v[5] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][4]] ^ $cst[$sigma[$i][4 + 1]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 16)) | ($v[14] ^ $v[2] >> 16) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 12)) | ($v[6] ^ $v[10] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][4 + 1]] ^ $cst[$sigma[$i][4]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 8)) | ($v[14] ^ $v[2] >> 8) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 7)) | ($v[6] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][6]] ^ $cst[$sigma[$i][6 + 1]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 16)) | ($v[15] ^ $v[3] >> 16) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 12)) | ($v[7] ^ $v[11] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][6 + 1]] ^ $cst[$sigma[$i][6]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 8)) | ($v[15] ^ $v[3] >> 8) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 7)) | ($v[7] ^ $v[11] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][14]] ^ $cst[$sigma[$i][14 + 1]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 16)) | ($v[14] ^ $v[3] >> 16) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 12)) | ($v[4] ^ $v[9] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][14 + 1]] ^ $cst[$sigma[$i][14]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 8)) | ($v[14] ^ $v[3] >> 8) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 7)) | ($v[4] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][12]] ^ $cst[$sigma[$i][12 + 1]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 16)) | ($v[13] ^ $v[2] >> 16) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 12)) | ($v[7] ^ $v[8] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][12 + 1]] ^ $cst[$sigma[$i][12]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 8)) | ($v[13] ^ $v[2] >> 8) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 7)) | ($v[7] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][8]] ^ $cst[$sigma[$i][8 + 1]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 16)) | ($v[15] ^ $v[0] >> 16) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 12)) | ($v[5] ^ $v[10] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][8 + 1]] ^ $cst[$sigma[$i][8]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 8)) | ($v[15] ^ $v[0] >> 8) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 7)) | ($v[5] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][10]] ^ $cst[$sigma[$i][10 + 1]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 16)) | ($v[12] ^ $v[1] >> 16) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 12)) | ($v[6] ^ $v[11] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][10 + 1]] ^ $cst[$sigma[$i][10]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 8)) | ($v[12] ^ $v[1] >> 8) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 7)) | ($v[6] ^ $v[11] >> 7) & 0xffffffff;

$i=13;
global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][0]] ^ $cst[$sigma[$i][0 + 1]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 16)) | ($v[12] ^ $v[0] >> 16) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 12)) | ($v[4] ^ $v[8] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][0 + 1]] ^ $cst[$sigma[$i][0]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 8)) | ($v[12] ^ $v[0] >> 8) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 7)) | ($v[4] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][2]] ^ $cst[$sigma[$i][2 + 1]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 16)) | ($v[13] ^ $v[1] >> 16) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 12)) | ($v[5] ^ $v[9] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][2 + 1]] ^ $cst[$sigma[$i][2]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 8)) | ($v[13] ^ $v[1] >> 8) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 7)) | ($v[5] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][4]] ^ $cst[$sigma[$i][4 + 1]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 16)) | ($v[14] ^ $v[2] >> 16) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 12)) | ($v[6] ^ $v[10] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][4 + 1]] ^ $cst[$sigma[$i][4]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 8)) | ($v[14] ^ $v[2] >> 8) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 7)) | ($v[6] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][6]] ^ $cst[$sigma[$i][6 + 1]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 16)) | ($v[15] ^ $v[3] >> 16) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 12)) | ($v[7] ^ $v[11] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][6 + 1]] ^ $cst[$sigma[$i][6]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 8)) | ($v[15] ^ $v[3] >> 8) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 7)) | ($v[7] ^ $v[11] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][14]] ^ $cst[$sigma[$i][14 + 1]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 16)) | ($v[14] ^ $v[3] >> 16) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 12)) | ($v[4] ^ $v[9] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][14 + 1]] ^ $cst[$sigma[$i][14]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 8)) | ($v[14] ^ $v[3] >> 8) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 7)) | ($v[4] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][12]] ^ $cst[$sigma[$i][12 + 1]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 16)) | ($v[13] ^ $v[2] >> 16) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 12)) | ($v[7] ^ $v[8] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][12 + 1]] ^ $cst[$sigma[$i][12]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 8)) | ($v[13] ^ $v[2] >> 8) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 7)) | ($v[7] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][8]] ^ $cst[$sigma[$i][8 + 1]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 16)) | ($v[15] ^ $v[0] >> 16) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 12)) | ($v[5] ^ $v[10] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][8 + 1]] ^ $cst[$sigma[$i][8]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 8)) | ($v[15] ^ $v[0] >> 8) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 7)) | ($v[5] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][10]] ^ $cst[$sigma[$i][10 + 1]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 16)) | ($v[12] ^ $v[1] >> 16) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 12)) | ($v[6] ^ $v[11] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][10 + 1]] ^ $cst[$sigma[$i][10]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 8)) | ($v[12] ^ $v[1] >> 8) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 7)) | ($v[6] ^ $v[11] >> 7) & 0xffffffff;



    $i=0;
$S->h[$i % 8] ^= $v[$i] & 0xffffffff;

$i=1;
$S->h[$i % 8] ^= $v[$i] & 0xffffffff;

$i=2;
$S->h[$i % 8] ^= $v[$i] & 0xffffffff;

$i=3;
$S->h[$i % 8] ^= $v[$i] & 0xffffffff;

$i=4;
$S->h[$i % 8] ^= $v[$i] & 0xffffffff;

$i=5;
$S->h[$i % 8] ^= $v[$i] & 0xffffffff;

$i=6;
$S->h[$i % 8] ^= $v[$i] & 0xffffffff;

$i=7;
$S->h[$i % 8] ^= $v[$i] & 0xffffffff;

$i=8;
$S->h[$i % 8] ^= $v[$i] & 0xffffffff;

$i=9;
$S->h[$i % 8] ^= $v[$i] & 0xffffffff;

$i=10;
$S->h[$i % 8] ^= $v[$i] & 0xffffffff;

$i=11;
$S->h[$i % 8] ^= $v[$i] & 0xffffffff;

$i=12;
$S->h[$i % 8] ^= $v[$i] & 0xffffffff;

$i=13;
$S->h[$i % 8] ^= $v[$i] & 0xffffffff;

$i=14;
$S->h[$i % 8] ^= $v[$i] & 0xffffffff;

$i=15;
$S->h[$i % 8] ^= $v[$i] & 0xffffffff;



    $i=0;
$S->h[$i] ^= $S->s[$i % 4];

$i=1;
$S->h[$i] ^= $S->s[$i % 4];

$i=2;
$S->h[$i] ^= $S->s[$i % 4];

$i=3;
$S->h[$i] ^= $S->s[$i % 4];

$i=4;
$S->h[$i] ^= $S->s[$i % 4];

$i=5;
$S->h[$i] ^= $S->s[$i % 4];

$i=6;
$S->h[$i] ^= $S->s[$i % 4];

$i=7;
$S->h[$i] ^= $S->s[$i % 4];



        #$data += $fill;
        $data = array_slice($data, $fill);
        $datalen -= ($fill << 3);
        $left = 0;
    }

    while ($datalen >= 512) {
        $S->t[0] += 512;

        if ($S->t[0] === 0)
            ++$S->t[1];

        

    #global $sigma, $cst;
    //uint32_t v[16], m[16], i;
    $v = array_fill(0, 16, 0);
    $m = array_fill(0, 16, 0);
    #$i = 0;

    for ($i = 0, $p = 0; $i < 16 && $p < 64;)
        $m[$i++] = 

     ((($data[$p++] & 0xff) << 24) | (($data[$p++] & 0xff) << 16) |
            (($data[$p++] & 0xff) << 8) | ($data[$p++] & 0xff)) & 0xffffffff;


    for ($i = 0; $i < 8; ++$i) {
        $v[$i] = $S->h[$i];
    }/* END unroll */

    $v[8] = $S->s[0] ^ 0x243F6A88;
    $v[9] = $S->s[1] ^ 0x85A308D3;
    $v[10] = $S->s[2] ^ 0x13198A2E;
    $v[11] = $S->s[3] ^ 0x03707344;
    $v[12] = 0xA4093822;
    $v[13] = 0x299F31D0;
    $v[14] = 0x082EFA98;
    $v[15] = 0xEC4E6C89;

    if ($S->nullt == 0) {
        $v[12] ^= $S->t[0];
        $v[13] ^= $S->t[0];
        $v[14] ^= $S->t[1];
        $v[15] ^= $S->t[1];
    }

    $i=0;
global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][0]] ^ $cst[$sigma[$i][0 + 1]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 16)) | ($v[12] ^ $v[0] >> 16) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 12)) | ($v[4] ^ $v[8] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][0 + 1]] ^ $cst[$sigma[$i][0]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 8)) | ($v[12] ^ $v[0] >> 8) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 7)) | ($v[4] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][2]] ^ $cst[$sigma[$i][2 + 1]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 16)) | ($v[13] ^ $v[1] >> 16) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 12)) | ($v[5] ^ $v[9] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][2 + 1]] ^ $cst[$sigma[$i][2]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 8)) | ($v[13] ^ $v[1] >> 8) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 7)) | ($v[5] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][4]] ^ $cst[$sigma[$i][4 + 1]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 16)) | ($v[14] ^ $v[2] >> 16) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 12)) | ($v[6] ^ $v[10] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][4 + 1]] ^ $cst[$sigma[$i][4]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 8)) | ($v[14] ^ $v[2] >> 8) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 7)) | ($v[6] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][6]] ^ $cst[$sigma[$i][6 + 1]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 16)) | ($v[15] ^ $v[3] >> 16) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 12)) | ($v[7] ^ $v[11] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][6 + 1]] ^ $cst[$sigma[$i][6]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 8)) | ($v[15] ^ $v[3] >> 8) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 7)) | ($v[7] ^ $v[11] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][14]] ^ $cst[$sigma[$i][14 + 1]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 16)) | ($v[14] ^ $v[3] >> 16) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 12)) | ($v[4] ^ $v[9] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][14 + 1]] ^ $cst[$sigma[$i][14]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 8)) | ($v[14] ^ $v[3] >> 8) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 7)) | ($v[4] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][12]] ^ $cst[$sigma[$i][12 + 1]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 16)) | ($v[13] ^ $v[2] >> 16) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 12)) | ($v[7] ^ $v[8] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][12 + 1]] ^ $cst[$sigma[$i][12]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 8)) | ($v[13] ^ $v[2] >> 8) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 7)) | ($v[7] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][8]] ^ $cst[$sigma[$i][8 + 1]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 16)) | ($v[15] ^ $v[0] >> 16) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 12)) | ($v[5] ^ $v[10] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][8 + 1]] ^ $cst[$sigma[$i][8]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 8)) | ($v[15] ^ $v[0] >> 8) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 7)) | ($v[5] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][10]] ^ $cst[$sigma[$i][10 + 1]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 16)) | ($v[12] ^ $v[1] >> 16) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 12)) | ($v[6] ^ $v[11] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][10 + 1]] ^ $cst[$sigma[$i][10]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 8)) | ($v[12] ^ $v[1] >> 8) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 7)) | ($v[6] ^ $v[11] >> 7) & 0xffffffff;

$i=1;
global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][0]] ^ $cst[$sigma[$i][0 + 1]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 16)) | ($v[12] ^ $v[0] >> 16) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 12)) | ($v[4] ^ $v[8] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][0 + 1]] ^ $cst[$sigma[$i][0]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 8)) | ($v[12] ^ $v[0] >> 8) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 7)) | ($v[4] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][2]] ^ $cst[$sigma[$i][2 + 1]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 16)) | ($v[13] ^ $v[1] >> 16) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 12)) | ($v[5] ^ $v[9] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][2 + 1]] ^ $cst[$sigma[$i][2]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 8)) | ($v[13] ^ $v[1] >> 8) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 7)) | ($v[5] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][4]] ^ $cst[$sigma[$i][4 + 1]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 16)) | ($v[14] ^ $v[2] >> 16) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 12)) | ($v[6] ^ $v[10] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][4 + 1]] ^ $cst[$sigma[$i][4]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 8)) | ($v[14] ^ $v[2] >> 8) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 7)) | ($v[6] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][6]] ^ $cst[$sigma[$i][6 + 1]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 16)) | ($v[15] ^ $v[3] >> 16) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 12)) | ($v[7] ^ $v[11] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][6 + 1]] ^ $cst[$sigma[$i][6]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 8)) | ($v[15] ^ $v[3] >> 8) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 7)) | ($v[7] ^ $v[11] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][14]] ^ $cst[$sigma[$i][14 + 1]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 16)) | ($v[14] ^ $v[3] >> 16) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 12)) | ($v[4] ^ $v[9] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][14 + 1]] ^ $cst[$sigma[$i][14]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 8)) | ($v[14] ^ $v[3] >> 8) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 7)) | ($v[4] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][12]] ^ $cst[$sigma[$i][12 + 1]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 16)) | ($v[13] ^ $v[2] >> 16) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 12)) | ($v[7] ^ $v[8] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][12 + 1]] ^ $cst[$sigma[$i][12]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 8)) | ($v[13] ^ $v[2] >> 8) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 7)) | ($v[7] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][8]] ^ $cst[$sigma[$i][8 + 1]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 16)) | ($v[15] ^ $v[0] >> 16) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 12)) | ($v[5] ^ $v[10] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][8 + 1]] ^ $cst[$sigma[$i][8]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 8)) | ($v[15] ^ $v[0] >> 8) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 7)) | ($v[5] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][10]] ^ $cst[$sigma[$i][10 + 1]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 16)) | ($v[12] ^ $v[1] >> 16) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 12)) | ($v[6] ^ $v[11] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][10 + 1]] ^ $cst[$sigma[$i][10]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 8)) | ($v[12] ^ $v[1] >> 8) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 7)) | ($v[6] ^ $v[11] >> 7) & 0xffffffff;

$i=2;
global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][0]] ^ $cst[$sigma[$i][0 + 1]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 16)) | ($v[12] ^ $v[0] >> 16) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 12)) | ($v[4] ^ $v[8] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][0 + 1]] ^ $cst[$sigma[$i][0]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 8)) | ($v[12] ^ $v[0] >> 8) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 7)) | ($v[4] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][2]] ^ $cst[$sigma[$i][2 + 1]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 16)) | ($v[13] ^ $v[1] >> 16) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 12)) | ($v[5] ^ $v[9] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][2 + 1]] ^ $cst[$sigma[$i][2]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 8)) | ($v[13] ^ $v[1] >> 8) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 7)) | ($v[5] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][4]] ^ $cst[$sigma[$i][4 + 1]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 16)) | ($v[14] ^ $v[2] >> 16) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 12)) | ($v[6] ^ $v[10] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][4 + 1]] ^ $cst[$sigma[$i][4]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 8)) | ($v[14] ^ $v[2] >> 8) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 7)) | ($v[6] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][6]] ^ $cst[$sigma[$i][6 + 1]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 16)) | ($v[15] ^ $v[3] >> 16) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 12)) | ($v[7] ^ $v[11] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][6 + 1]] ^ $cst[$sigma[$i][6]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 8)) | ($v[15] ^ $v[3] >> 8) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 7)) | ($v[7] ^ $v[11] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][14]] ^ $cst[$sigma[$i][14 + 1]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 16)) | ($v[14] ^ $v[3] >> 16) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 12)) | ($v[4] ^ $v[9] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][14 + 1]] ^ $cst[$sigma[$i][14]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 8)) | ($v[14] ^ $v[3] >> 8) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 7)) | ($v[4] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][12]] ^ $cst[$sigma[$i][12 + 1]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 16)) | ($v[13] ^ $v[2] >> 16) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 12)) | ($v[7] ^ $v[8] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][12 + 1]] ^ $cst[$sigma[$i][12]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 8)) | ($v[13] ^ $v[2] >> 8) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 7)) | ($v[7] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][8]] ^ $cst[$sigma[$i][8 + 1]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 16)) | ($v[15] ^ $v[0] >> 16) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 12)) | ($v[5] ^ $v[10] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][8 + 1]] ^ $cst[$sigma[$i][8]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 8)) | ($v[15] ^ $v[0] >> 8) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 7)) | ($v[5] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][10]] ^ $cst[$sigma[$i][10 + 1]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 16)) | ($v[12] ^ $v[1] >> 16) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 12)) | ($v[6] ^ $v[11] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][10 + 1]] ^ $cst[$sigma[$i][10]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 8)) | ($v[12] ^ $v[1] >> 8) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 7)) | ($v[6] ^ $v[11] >> 7) & 0xffffffff;

$i=3;
global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][0]] ^ $cst[$sigma[$i][0 + 1]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 16)) | ($v[12] ^ $v[0] >> 16) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 12)) | ($v[4] ^ $v[8] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][0 + 1]] ^ $cst[$sigma[$i][0]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 8)) | ($v[12] ^ $v[0] >> 8) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 7)) | ($v[4] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][2]] ^ $cst[$sigma[$i][2 + 1]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 16)) | ($v[13] ^ $v[1] >> 16) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 12)) | ($v[5] ^ $v[9] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][2 + 1]] ^ $cst[$sigma[$i][2]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 8)) | ($v[13] ^ $v[1] >> 8) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 7)) | ($v[5] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][4]] ^ $cst[$sigma[$i][4 + 1]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 16)) | ($v[14] ^ $v[2] >> 16) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 12)) | ($v[6] ^ $v[10] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][4 + 1]] ^ $cst[$sigma[$i][4]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 8)) | ($v[14] ^ $v[2] >> 8) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 7)) | ($v[6] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][6]] ^ $cst[$sigma[$i][6 + 1]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 16)) | ($v[15] ^ $v[3] >> 16) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 12)) | ($v[7] ^ $v[11] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][6 + 1]] ^ $cst[$sigma[$i][6]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 8)) | ($v[15] ^ $v[3] >> 8) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 7)) | ($v[7] ^ $v[11] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][14]] ^ $cst[$sigma[$i][14 + 1]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 16)) | ($v[14] ^ $v[3] >> 16) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 12)) | ($v[4] ^ $v[9] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][14 + 1]] ^ $cst[$sigma[$i][14]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 8)) | ($v[14] ^ $v[3] >> 8) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 7)) | ($v[4] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][12]] ^ $cst[$sigma[$i][12 + 1]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 16)) | ($v[13] ^ $v[2] >> 16) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 12)) | ($v[7] ^ $v[8] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][12 + 1]] ^ $cst[$sigma[$i][12]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 8)) | ($v[13] ^ $v[2] >> 8) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 7)) | ($v[7] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][8]] ^ $cst[$sigma[$i][8 + 1]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 16)) | ($v[15] ^ $v[0] >> 16) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 12)) | ($v[5] ^ $v[10] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][8 + 1]] ^ $cst[$sigma[$i][8]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 8)) | ($v[15] ^ $v[0] >> 8) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 7)) | ($v[5] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][10]] ^ $cst[$sigma[$i][10 + 1]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 16)) | ($v[12] ^ $v[1] >> 16) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 12)) | ($v[6] ^ $v[11] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][10 + 1]] ^ $cst[$sigma[$i][10]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 8)) | ($v[12] ^ $v[1] >> 8) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 7)) | ($v[6] ^ $v[11] >> 7) & 0xffffffff;

$i=4;
global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][0]] ^ $cst[$sigma[$i][0 + 1]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 16)) | ($v[12] ^ $v[0] >> 16) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 12)) | ($v[4] ^ $v[8] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][0 + 1]] ^ $cst[$sigma[$i][0]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 8)) | ($v[12] ^ $v[0] >> 8) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 7)) | ($v[4] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][2]] ^ $cst[$sigma[$i][2 + 1]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 16)) | ($v[13] ^ $v[1] >> 16) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 12)) | ($v[5] ^ $v[9] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][2 + 1]] ^ $cst[$sigma[$i][2]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 8)) | ($v[13] ^ $v[1] >> 8) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 7)) | ($v[5] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][4]] ^ $cst[$sigma[$i][4 + 1]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 16)) | ($v[14] ^ $v[2] >> 16) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 12)) | ($v[6] ^ $v[10] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][4 + 1]] ^ $cst[$sigma[$i][4]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 8)) | ($v[14] ^ $v[2] >> 8) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 7)) | ($v[6] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][6]] ^ $cst[$sigma[$i][6 + 1]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 16)) | ($v[15] ^ $v[3] >> 16) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 12)) | ($v[7] ^ $v[11] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][6 + 1]] ^ $cst[$sigma[$i][6]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 8)) | ($v[15] ^ $v[3] >> 8) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 7)) | ($v[7] ^ $v[11] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][14]] ^ $cst[$sigma[$i][14 + 1]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 16)) | ($v[14] ^ $v[3] >> 16) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 12)) | ($v[4] ^ $v[9] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][14 + 1]] ^ $cst[$sigma[$i][14]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 8)) | ($v[14] ^ $v[3] >> 8) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 7)) | ($v[4] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][12]] ^ $cst[$sigma[$i][12 + 1]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 16)) | ($v[13] ^ $v[2] >> 16) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 12)) | ($v[7] ^ $v[8] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][12 + 1]] ^ $cst[$sigma[$i][12]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 8)) | ($v[13] ^ $v[2] >> 8) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 7)) | ($v[7] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][8]] ^ $cst[$sigma[$i][8 + 1]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 16)) | ($v[15] ^ $v[0] >> 16) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 12)) | ($v[5] ^ $v[10] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][8 + 1]] ^ $cst[$sigma[$i][8]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 8)) | ($v[15] ^ $v[0] >> 8) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 7)) | ($v[5] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][10]] ^ $cst[$sigma[$i][10 + 1]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 16)) | ($v[12] ^ $v[1] >> 16) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 12)) | ($v[6] ^ $v[11] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][10 + 1]] ^ $cst[$sigma[$i][10]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 8)) | ($v[12] ^ $v[1] >> 8) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 7)) | ($v[6] ^ $v[11] >> 7) & 0xffffffff;

$i=5;
global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][0]] ^ $cst[$sigma[$i][0 + 1]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 16)) | ($v[12] ^ $v[0] >> 16) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 12)) | ($v[4] ^ $v[8] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][0 + 1]] ^ $cst[$sigma[$i][0]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 8)) | ($v[12] ^ $v[0] >> 8) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 7)) | ($v[4] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][2]] ^ $cst[$sigma[$i][2 + 1]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 16)) | ($v[13] ^ $v[1] >> 16) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 12)) | ($v[5] ^ $v[9] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][2 + 1]] ^ $cst[$sigma[$i][2]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 8)) | ($v[13] ^ $v[1] >> 8) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 7)) | ($v[5] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][4]] ^ $cst[$sigma[$i][4 + 1]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 16)) | ($v[14] ^ $v[2] >> 16) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 12)) | ($v[6] ^ $v[10] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][4 + 1]] ^ $cst[$sigma[$i][4]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 8)) | ($v[14] ^ $v[2] >> 8) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 7)) | ($v[6] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][6]] ^ $cst[$sigma[$i][6 + 1]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 16)) | ($v[15] ^ $v[3] >> 16) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 12)) | ($v[7] ^ $v[11] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][6 + 1]] ^ $cst[$sigma[$i][6]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 8)) | ($v[15] ^ $v[3] >> 8) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 7)) | ($v[7] ^ $v[11] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][14]] ^ $cst[$sigma[$i][14 + 1]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 16)) | ($v[14] ^ $v[3] >> 16) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 12)) | ($v[4] ^ $v[9] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][14 + 1]] ^ $cst[$sigma[$i][14]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 8)) | ($v[14] ^ $v[3] >> 8) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 7)) | ($v[4] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][12]] ^ $cst[$sigma[$i][12 + 1]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 16)) | ($v[13] ^ $v[2] >> 16) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 12)) | ($v[7] ^ $v[8] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][12 + 1]] ^ $cst[$sigma[$i][12]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 8)) | ($v[13] ^ $v[2] >> 8) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 7)) | ($v[7] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][8]] ^ $cst[$sigma[$i][8 + 1]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 16)) | ($v[15] ^ $v[0] >> 16) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 12)) | ($v[5] ^ $v[10] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][8 + 1]] ^ $cst[$sigma[$i][8]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 8)) | ($v[15] ^ $v[0] >> 8) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 7)) | ($v[5] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][10]] ^ $cst[$sigma[$i][10 + 1]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 16)) | ($v[12] ^ $v[1] >> 16) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 12)) | ($v[6] ^ $v[11] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][10 + 1]] ^ $cst[$sigma[$i][10]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 8)) | ($v[12] ^ $v[1] >> 8) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 7)) | ($v[6] ^ $v[11] >> 7) & 0xffffffff;

$i=6;
global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][0]] ^ $cst[$sigma[$i][0 + 1]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 16)) | ($v[12] ^ $v[0] >> 16) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 12)) | ($v[4] ^ $v[8] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][0 + 1]] ^ $cst[$sigma[$i][0]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 8)) | ($v[12] ^ $v[0] >> 8) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 7)) | ($v[4] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][2]] ^ $cst[$sigma[$i][2 + 1]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 16)) | ($v[13] ^ $v[1] >> 16) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 12)) | ($v[5] ^ $v[9] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][2 + 1]] ^ $cst[$sigma[$i][2]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 8)) | ($v[13] ^ $v[1] >> 8) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 7)) | ($v[5] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][4]] ^ $cst[$sigma[$i][4 + 1]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 16)) | ($v[14] ^ $v[2] >> 16) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 12)) | ($v[6] ^ $v[10] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][4 + 1]] ^ $cst[$sigma[$i][4]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 8)) | ($v[14] ^ $v[2] >> 8) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 7)) | ($v[6] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][6]] ^ $cst[$sigma[$i][6 + 1]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 16)) | ($v[15] ^ $v[3] >> 16) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 12)) | ($v[7] ^ $v[11] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][6 + 1]] ^ $cst[$sigma[$i][6]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 8)) | ($v[15] ^ $v[3] >> 8) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 7)) | ($v[7] ^ $v[11] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][14]] ^ $cst[$sigma[$i][14 + 1]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 16)) | ($v[14] ^ $v[3] >> 16) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 12)) | ($v[4] ^ $v[9] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][14 + 1]] ^ $cst[$sigma[$i][14]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 8)) | ($v[14] ^ $v[3] >> 8) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 7)) | ($v[4] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][12]] ^ $cst[$sigma[$i][12 + 1]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 16)) | ($v[13] ^ $v[2] >> 16) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 12)) | ($v[7] ^ $v[8] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][12 + 1]] ^ $cst[$sigma[$i][12]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 8)) | ($v[13] ^ $v[2] >> 8) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 7)) | ($v[7] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][8]] ^ $cst[$sigma[$i][8 + 1]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 16)) | ($v[15] ^ $v[0] >> 16) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 12)) | ($v[5] ^ $v[10] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][8 + 1]] ^ $cst[$sigma[$i][8]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 8)) | ($v[15] ^ $v[0] >> 8) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 7)) | ($v[5] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][10]] ^ $cst[$sigma[$i][10 + 1]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 16)) | ($v[12] ^ $v[1] >> 16) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 12)) | ($v[6] ^ $v[11] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][10 + 1]] ^ $cst[$sigma[$i][10]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 8)) | ($v[12] ^ $v[1] >> 8) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 7)) | ($v[6] ^ $v[11] >> 7) & 0xffffffff;

$i=7;
global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][0]] ^ $cst[$sigma[$i][0 + 1]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 16)) | ($v[12] ^ $v[0] >> 16) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 12)) | ($v[4] ^ $v[8] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][0 + 1]] ^ $cst[$sigma[$i][0]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 8)) | ($v[12] ^ $v[0] >> 8) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 7)) | ($v[4] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][2]] ^ $cst[$sigma[$i][2 + 1]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 16)) | ($v[13] ^ $v[1] >> 16) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 12)) | ($v[5] ^ $v[9] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][2 + 1]] ^ $cst[$sigma[$i][2]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 8)) | ($v[13] ^ $v[1] >> 8) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 7)) | ($v[5] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][4]] ^ $cst[$sigma[$i][4 + 1]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 16)) | ($v[14] ^ $v[2] >> 16) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 12)) | ($v[6] ^ $v[10] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][4 + 1]] ^ $cst[$sigma[$i][4]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 8)) | ($v[14] ^ $v[2] >> 8) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 7)) | ($v[6] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][6]] ^ $cst[$sigma[$i][6 + 1]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 16)) | ($v[15] ^ $v[3] >> 16) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 12)) | ($v[7] ^ $v[11] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][6 + 1]] ^ $cst[$sigma[$i][6]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 8)) | ($v[15] ^ $v[3] >> 8) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 7)) | ($v[7] ^ $v[11] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][14]] ^ $cst[$sigma[$i][14 + 1]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 16)) | ($v[14] ^ $v[3] >> 16) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 12)) | ($v[4] ^ $v[9] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][14 + 1]] ^ $cst[$sigma[$i][14]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 8)) | ($v[14] ^ $v[3] >> 8) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 7)) | ($v[4] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][12]] ^ $cst[$sigma[$i][12 + 1]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 16)) | ($v[13] ^ $v[2] >> 16) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 12)) | ($v[7] ^ $v[8] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][12 + 1]] ^ $cst[$sigma[$i][12]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 8)) | ($v[13] ^ $v[2] >> 8) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 7)) | ($v[7] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][8]] ^ $cst[$sigma[$i][8 + 1]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 16)) | ($v[15] ^ $v[0] >> 16) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 12)) | ($v[5] ^ $v[10] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][8 + 1]] ^ $cst[$sigma[$i][8]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 8)) | ($v[15] ^ $v[0] >> 8) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 7)) | ($v[5] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][10]] ^ $cst[$sigma[$i][10 + 1]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 16)) | ($v[12] ^ $v[1] >> 16) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 12)) | ($v[6] ^ $v[11] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][10 + 1]] ^ $cst[$sigma[$i][10]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 8)) | ($v[12] ^ $v[1] >> 8) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 7)) | ($v[6] ^ $v[11] >> 7) & 0xffffffff;

$i=8;
global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][0]] ^ $cst[$sigma[$i][0 + 1]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 16)) | ($v[12] ^ $v[0] >> 16) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 12)) | ($v[4] ^ $v[8] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][0 + 1]] ^ $cst[$sigma[$i][0]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 8)) | ($v[12] ^ $v[0] >> 8) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 7)) | ($v[4] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][2]] ^ $cst[$sigma[$i][2 + 1]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 16)) | ($v[13] ^ $v[1] >> 16) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 12)) | ($v[5] ^ $v[9] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][2 + 1]] ^ $cst[$sigma[$i][2]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 8)) | ($v[13] ^ $v[1] >> 8) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 7)) | ($v[5] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][4]] ^ $cst[$sigma[$i][4 + 1]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 16)) | ($v[14] ^ $v[2] >> 16) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 12)) | ($v[6] ^ $v[10] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][4 + 1]] ^ $cst[$sigma[$i][4]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 8)) | ($v[14] ^ $v[2] >> 8) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 7)) | ($v[6] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][6]] ^ $cst[$sigma[$i][6 + 1]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 16)) | ($v[15] ^ $v[3] >> 16) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 12)) | ($v[7] ^ $v[11] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][6 + 1]] ^ $cst[$sigma[$i][6]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 8)) | ($v[15] ^ $v[3] >> 8) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 7)) | ($v[7] ^ $v[11] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][14]] ^ $cst[$sigma[$i][14 + 1]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 16)) | ($v[14] ^ $v[3] >> 16) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 12)) | ($v[4] ^ $v[9] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][14 + 1]] ^ $cst[$sigma[$i][14]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 8)) | ($v[14] ^ $v[3] >> 8) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 7)) | ($v[4] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][12]] ^ $cst[$sigma[$i][12 + 1]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 16)) | ($v[13] ^ $v[2] >> 16) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 12)) | ($v[7] ^ $v[8] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][12 + 1]] ^ $cst[$sigma[$i][12]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 8)) | ($v[13] ^ $v[2] >> 8) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 7)) | ($v[7] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][8]] ^ $cst[$sigma[$i][8 + 1]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 16)) | ($v[15] ^ $v[0] >> 16) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 12)) | ($v[5] ^ $v[10] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][8 + 1]] ^ $cst[$sigma[$i][8]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 8)) | ($v[15] ^ $v[0] >> 8) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 7)) | ($v[5] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][10]] ^ $cst[$sigma[$i][10 + 1]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 16)) | ($v[12] ^ $v[1] >> 16) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 12)) | ($v[6] ^ $v[11] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][10 + 1]] ^ $cst[$sigma[$i][10]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 8)) | ($v[12] ^ $v[1] >> 8) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 7)) | ($v[6] ^ $v[11] >> 7) & 0xffffffff;

$i=9;
global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][0]] ^ $cst[$sigma[$i][0 + 1]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 16)) | ($v[12] ^ $v[0] >> 16) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 12)) | ($v[4] ^ $v[8] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][0 + 1]] ^ $cst[$sigma[$i][0]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 8)) | ($v[12] ^ $v[0] >> 8) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 7)) | ($v[4] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][2]] ^ $cst[$sigma[$i][2 + 1]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 16)) | ($v[13] ^ $v[1] >> 16) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 12)) | ($v[5] ^ $v[9] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][2 + 1]] ^ $cst[$sigma[$i][2]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 8)) | ($v[13] ^ $v[1] >> 8) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 7)) | ($v[5] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][4]] ^ $cst[$sigma[$i][4 + 1]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 16)) | ($v[14] ^ $v[2] >> 16) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 12)) | ($v[6] ^ $v[10] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][4 + 1]] ^ $cst[$sigma[$i][4]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 8)) | ($v[14] ^ $v[2] >> 8) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 7)) | ($v[6] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][6]] ^ $cst[$sigma[$i][6 + 1]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 16)) | ($v[15] ^ $v[3] >> 16) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 12)) | ($v[7] ^ $v[11] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][6 + 1]] ^ $cst[$sigma[$i][6]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 8)) | ($v[15] ^ $v[3] >> 8) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 7)) | ($v[7] ^ $v[11] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][14]] ^ $cst[$sigma[$i][14 + 1]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 16)) | ($v[14] ^ $v[3] >> 16) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 12)) | ($v[4] ^ $v[9] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][14 + 1]] ^ $cst[$sigma[$i][14]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 8)) | ($v[14] ^ $v[3] >> 8) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 7)) | ($v[4] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][12]] ^ $cst[$sigma[$i][12 + 1]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 16)) | ($v[13] ^ $v[2] >> 16) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 12)) | ($v[7] ^ $v[8] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][12 + 1]] ^ $cst[$sigma[$i][12]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 8)) | ($v[13] ^ $v[2] >> 8) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 7)) | ($v[7] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][8]] ^ $cst[$sigma[$i][8 + 1]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 16)) | ($v[15] ^ $v[0] >> 16) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 12)) | ($v[5] ^ $v[10] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][8 + 1]] ^ $cst[$sigma[$i][8]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 8)) | ($v[15] ^ $v[0] >> 8) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 7)) | ($v[5] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][10]] ^ $cst[$sigma[$i][10 + 1]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 16)) | ($v[12] ^ $v[1] >> 16) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 12)) | ($v[6] ^ $v[11] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][10 + 1]] ^ $cst[$sigma[$i][10]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 8)) | ($v[12] ^ $v[1] >> 8) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 7)) | ($v[6] ^ $v[11] >> 7) & 0xffffffff;

$i=10;
global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][0]] ^ $cst[$sigma[$i][0 + 1]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 16)) | ($v[12] ^ $v[0] >> 16) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 12)) | ($v[4] ^ $v[8] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][0 + 1]] ^ $cst[$sigma[$i][0]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 8)) | ($v[12] ^ $v[0] >> 8) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 7)) | ($v[4] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][2]] ^ $cst[$sigma[$i][2 + 1]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 16)) | ($v[13] ^ $v[1] >> 16) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 12)) | ($v[5] ^ $v[9] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][2 + 1]] ^ $cst[$sigma[$i][2]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 8)) | ($v[13] ^ $v[1] >> 8) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 7)) | ($v[5] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][4]] ^ $cst[$sigma[$i][4 + 1]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 16)) | ($v[14] ^ $v[2] >> 16) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 12)) | ($v[6] ^ $v[10] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][4 + 1]] ^ $cst[$sigma[$i][4]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 8)) | ($v[14] ^ $v[2] >> 8) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 7)) | ($v[6] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][6]] ^ $cst[$sigma[$i][6 + 1]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 16)) | ($v[15] ^ $v[3] >> 16) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 12)) | ($v[7] ^ $v[11] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][6 + 1]] ^ $cst[$sigma[$i][6]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 8)) | ($v[15] ^ $v[3] >> 8) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 7)) | ($v[7] ^ $v[11] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][14]] ^ $cst[$sigma[$i][14 + 1]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 16)) | ($v[14] ^ $v[3] >> 16) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 12)) | ($v[4] ^ $v[9] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][14 + 1]] ^ $cst[$sigma[$i][14]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 8)) | ($v[14] ^ $v[3] >> 8) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 7)) | ($v[4] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][12]] ^ $cst[$sigma[$i][12 + 1]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 16)) | ($v[13] ^ $v[2] >> 16) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 12)) | ($v[7] ^ $v[8] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][12 + 1]] ^ $cst[$sigma[$i][12]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 8)) | ($v[13] ^ $v[2] >> 8) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 7)) | ($v[7] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][8]] ^ $cst[$sigma[$i][8 + 1]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 16)) | ($v[15] ^ $v[0] >> 16) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 12)) | ($v[5] ^ $v[10] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][8 + 1]] ^ $cst[$sigma[$i][8]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 8)) | ($v[15] ^ $v[0] >> 8) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 7)) | ($v[5] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][10]] ^ $cst[$sigma[$i][10 + 1]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 16)) | ($v[12] ^ $v[1] >> 16) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 12)) | ($v[6] ^ $v[11] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][10 + 1]] ^ $cst[$sigma[$i][10]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 8)) | ($v[12] ^ $v[1] >> 8) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 7)) | ($v[6] ^ $v[11] >> 7) & 0xffffffff;

$i=11;
global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][0]] ^ $cst[$sigma[$i][0 + 1]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 16)) | ($v[12] ^ $v[0] >> 16) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 12)) | ($v[4] ^ $v[8] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][0 + 1]] ^ $cst[$sigma[$i][0]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 8)) | ($v[12] ^ $v[0] >> 8) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 7)) | ($v[4] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][2]] ^ $cst[$sigma[$i][2 + 1]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 16)) | ($v[13] ^ $v[1] >> 16) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 12)) | ($v[5] ^ $v[9] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][2 + 1]] ^ $cst[$sigma[$i][2]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 8)) | ($v[13] ^ $v[1] >> 8) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 7)) | ($v[5] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][4]] ^ $cst[$sigma[$i][4 + 1]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 16)) | ($v[14] ^ $v[2] >> 16) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 12)) | ($v[6] ^ $v[10] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][4 + 1]] ^ $cst[$sigma[$i][4]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 8)) | ($v[14] ^ $v[2] >> 8) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 7)) | ($v[6] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][6]] ^ $cst[$sigma[$i][6 + 1]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 16)) | ($v[15] ^ $v[3] >> 16) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 12)) | ($v[7] ^ $v[11] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][6 + 1]] ^ $cst[$sigma[$i][6]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 8)) | ($v[15] ^ $v[3] >> 8) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 7)) | ($v[7] ^ $v[11] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][14]] ^ $cst[$sigma[$i][14 + 1]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 16)) | ($v[14] ^ $v[3] >> 16) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 12)) | ($v[4] ^ $v[9] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][14 + 1]] ^ $cst[$sigma[$i][14]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 8)) | ($v[14] ^ $v[3] >> 8) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 7)) | ($v[4] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][12]] ^ $cst[$sigma[$i][12 + 1]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 16)) | ($v[13] ^ $v[2] >> 16) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 12)) | ($v[7] ^ $v[8] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][12 + 1]] ^ $cst[$sigma[$i][12]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 8)) | ($v[13] ^ $v[2] >> 8) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 7)) | ($v[7] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][8]] ^ $cst[$sigma[$i][8 + 1]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 16)) | ($v[15] ^ $v[0] >> 16) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 12)) | ($v[5] ^ $v[10] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][8 + 1]] ^ $cst[$sigma[$i][8]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 8)) | ($v[15] ^ $v[0] >> 8) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 7)) | ($v[5] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][10]] ^ $cst[$sigma[$i][10 + 1]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 16)) | ($v[12] ^ $v[1] >> 16) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 12)) | ($v[6] ^ $v[11] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][10 + 1]] ^ $cst[$sigma[$i][10]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 8)) | ($v[12] ^ $v[1] >> 8) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 7)) | ($v[6] ^ $v[11] >> 7) & 0xffffffff;

$i=12;
global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][0]] ^ $cst[$sigma[$i][0 + 1]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 16)) | ($v[12] ^ $v[0] >> 16) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 12)) | ($v[4] ^ $v[8] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][0 + 1]] ^ $cst[$sigma[$i][0]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 8)) | ($v[12] ^ $v[0] >> 8) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 7)) | ($v[4] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][2]] ^ $cst[$sigma[$i][2 + 1]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 16)) | ($v[13] ^ $v[1] >> 16) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 12)) | ($v[5] ^ $v[9] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][2 + 1]] ^ $cst[$sigma[$i][2]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 8)) | ($v[13] ^ $v[1] >> 8) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 7)) | ($v[5] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][4]] ^ $cst[$sigma[$i][4 + 1]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 16)) | ($v[14] ^ $v[2] >> 16) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 12)) | ($v[6] ^ $v[10] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][4 + 1]] ^ $cst[$sigma[$i][4]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 8)) | ($v[14] ^ $v[2] >> 8) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 7)) | ($v[6] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][6]] ^ $cst[$sigma[$i][6 + 1]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 16)) | ($v[15] ^ $v[3] >> 16) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 12)) | ($v[7] ^ $v[11] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][6 + 1]] ^ $cst[$sigma[$i][6]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 8)) | ($v[15] ^ $v[3] >> 8) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 7)) | ($v[7] ^ $v[11] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][14]] ^ $cst[$sigma[$i][14 + 1]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 16)) | ($v[14] ^ $v[3] >> 16) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 12)) | ($v[4] ^ $v[9] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][14 + 1]] ^ $cst[$sigma[$i][14]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 8)) | ($v[14] ^ $v[3] >> 8) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 7)) | ($v[4] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][12]] ^ $cst[$sigma[$i][12 + 1]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 16)) | ($v[13] ^ $v[2] >> 16) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 12)) | ($v[7] ^ $v[8] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][12 + 1]] ^ $cst[$sigma[$i][12]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 8)) | ($v[13] ^ $v[2] >> 8) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 7)) | ($v[7] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][8]] ^ $cst[$sigma[$i][8 + 1]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 16)) | ($v[15] ^ $v[0] >> 16) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 12)) | ($v[5] ^ $v[10] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][8 + 1]] ^ $cst[$sigma[$i][8]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 8)) | ($v[15] ^ $v[0] >> 8) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 7)) | ($v[5] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][10]] ^ $cst[$sigma[$i][10 + 1]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 16)) | ($v[12] ^ $v[1] >> 16) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 12)) | ($v[6] ^ $v[11] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][10 + 1]] ^ $cst[$sigma[$i][10]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 8)) | ($v[12] ^ $v[1] >> 8) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 7)) | ($v[6] ^ $v[11] >> 7) & 0xffffffff;

$i=13;
global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][0]] ^ $cst[$sigma[$i][0 + 1]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 16)) | ($v[12] ^ $v[0] >> 16) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 12)) | ($v[4] ^ $v[8] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][0 + 1]] ^ $cst[$sigma[$i][0]]) + $v[4];
    $v[12] = 
     ($v[12] ^ $v[0] << (32 - 8)) | ($v[12] ^ $v[0] >> 8) & 0xffffffff;

    $v[8] += $v[12];
    $v[4] = 
     ($v[4] ^ $v[8] << (32 - 7)) | ($v[4] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][2]] ^ $cst[$sigma[$i][2 + 1]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 16)) | ($v[13] ^ $v[1] >> 16) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 12)) | ($v[5] ^ $v[9] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][2 + 1]] ^ $cst[$sigma[$i][2]]) + $v[5];
    $v[13] = 
     ($v[13] ^ $v[1] << (32 - 8)) | ($v[13] ^ $v[1] >> 8) & 0xffffffff;

    $v[9] += $v[13];
    $v[5] = 
     ($v[5] ^ $v[9] << (32 - 7)) | ($v[5] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][4]] ^ $cst[$sigma[$i][4 + 1]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 16)) | ($v[14] ^ $v[2] >> 16) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 12)) | ($v[6] ^ $v[10] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][4 + 1]] ^ $cst[$sigma[$i][4]]) + $v[6];
    $v[14] = 
     ($v[14] ^ $v[2] << (32 - 8)) | ($v[14] ^ $v[2] >> 8) & 0xffffffff;

    $v[10] += $v[14];
    $v[6] = 
     ($v[6] ^ $v[10] << (32 - 7)) | ($v[6] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][6]] ^ $cst[$sigma[$i][6 + 1]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 16)) | ($v[15] ^ $v[3] >> 16) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 12)) | ($v[7] ^ $v[11] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][6 + 1]] ^ $cst[$sigma[$i][6]]) + $v[7];
    $v[15] = 
     ($v[15] ^ $v[3] << (32 - 8)) | ($v[15] ^ $v[3] >> 8) & 0xffffffff;

    $v[11] += $v[15];
    $v[7] = 
     ($v[7] ^ $v[11] << (32 - 7)) | ($v[7] ^ $v[11] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[3] += ($m[$sigma[$i][14]] ^ $cst[$sigma[$i][14 + 1]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 16)) | ($v[14] ^ $v[3] >> 16) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 12)) | ($v[4] ^ $v[9] >> 12) & 0xffffffff;

    $v[3] += ($m[$sigma[$i][14 + 1]] ^ $cst[$sigma[$i][14]]) + $v[4];
    $v[14] = 
     ($v[14] ^ $v[3] << (32 - 8)) | ($v[14] ^ $v[3] >> 8) & 0xffffffff;

    $v[9] += $v[14];
    $v[4] = 
     ($v[4] ^ $v[9] << (32 - 7)) | ($v[4] ^ $v[9] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[2] += ($m[$sigma[$i][12]] ^ $cst[$sigma[$i][12 + 1]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 16)) | ($v[13] ^ $v[2] >> 16) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 12)) | ($v[7] ^ $v[8] >> 12) & 0xffffffff;

    $v[2] += ($m[$sigma[$i][12 + 1]] ^ $cst[$sigma[$i][12]]) + $v[7];
    $v[13] = 
     ($v[13] ^ $v[2] << (32 - 8)) | ($v[13] ^ $v[2] >> 8) & 0xffffffff;

    $v[8] += $v[13];
    $v[7] = 
     ($v[7] ^ $v[8] << (32 - 7)) | ($v[7] ^ $v[8] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[0] += ($m[$sigma[$i][8]] ^ $cst[$sigma[$i][8 + 1]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 16)) | ($v[15] ^ $v[0] >> 16) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 12)) | ($v[5] ^ $v[10] >> 12) & 0xffffffff;

    $v[0] += ($m[$sigma[$i][8 + 1]] ^ $cst[$sigma[$i][8]]) + $v[5];
    $v[15] = 
     ($v[15] ^ $v[0] << (32 - 8)) | ($v[15] ^ $v[0] >> 8) & 0xffffffff;

    $v[10] += $v[15];
    $v[5] = 
     ($v[5] ^ $v[10] << (32 - 7)) | ($v[5] ^ $v[10] >> 7) & 0xffffffff;


        
    global /* $v, $m, $i, */$sigma, $cst;

    $v[1] += ($m[$sigma[$i][10]] ^ $cst[$sigma[$i][10 + 1]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 16)) | ($v[12] ^ $v[1] >> 16) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 12)) | ($v[6] ^ $v[11] >> 12) & 0xffffffff;

    $v[1] += ($m[$sigma[$i][10 + 1]] ^ $cst[$sigma[$i][10]]) + $v[6];
    $v[12] = 
     ($v[12] ^ $v[1] << (32 - 8)) | ($v[12] ^ $v[1] >> 8) & 0xffffffff;

    $v[11] += $v[12];
    $v[6] = 
     ($v[6] ^ $v[11] << (32 - 7)) | ($v[6] ^ $v[11] >> 7) & 0xffffffff;



    $i=0;
$S->h[$i % 8] ^= $v[$i] & 0xffffffff;

$i=1;
$S->h[$i % 8] ^= $v[$i] & 0xffffffff;

$i=2;
$S->h[$i % 8] ^= $v[$i] & 0xffffffff;

$i=3;
$S->h[$i % 8] ^= $v[$i] & 0xffffffff;

$i=4;
$S->h[$i % 8] ^= $v[$i] & 0xffffffff;

$i=5;
$S->h[$i % 8] ^= $v[$i] & 0xffffffff;

$i=6;
$S->h[$i % 8] ^= $v[$i] & 0xffffffff;

$i=7;
$S->h[$i % 8] ^= $v[$i] & 0xffffffff;

$i=8;
$S->h[$i % 8] ^= $v[$i] & 0xffffffff;

$i=9;
$S->h[$i % 8] ^= $v[$i] & 0xffffffff;

$i=10;
$S->h[$i % 8] ^= $v[$i] & 0xffffffff;

$i=11;
$S->h[$i % 8] ^= $v[$i] & 0xffffffff;

$i=12;
$S->h[$i % 8] ^= $v[$i] & 0xffffffff;

$i=13;
$S->h[$i % 8] ^= $v[$i] & 0xffffffff;

$i=14;
$S->h[$i % 8] ^= $v[$i] & 0xffffffff;

$i=15;
$S->h[$i % 8] ^= $v[$i] & 0xffffffff;



    $i=0;
$S->h[$i] ^= $S->s[$i % 4];

$i=1;
$S->h[$i] ^= $S->s[$i % 4];

$i=2;
$S->h[$i] ^= $S->s[$i % 4];

$i=3;
$S->h[$i] ^= $S->s[$i % 4];

$i=4;
$S->h[$i] ^= $S->s[$i % 4];

$i=5;
$S->h[$i] ^= $S->s[$i % 4];

$i=6;
$S->h[$i] ^= $S->s[$i % 4];

$i=7;
$S->h[$i] ^= $S->s[$i % 4];



        #$data += 64;
        $data = array_slice($data, 64);
        $datalen -= 512;
    }

    if ($datalen > 0) {
        #memcpy((void *) (S->buf + left), (void *) data, datalen >> 3);
        for ($x = 0; $x < ($datalen >> 3); ++$x)
            $S->buf[$x + $left] = $data[$x];

        $S->buflen = ($left << 3) + ((int) $datalen);
    } else
        $S->buflen = 0;
}

/**
 * 
 * @global array $padding
 * @param state $S state *S
 * @param array $digest uint8_t *digest
 * @param type $pa uint8_t
 * @param type $pb uint8_t
 */
function blake256_final_h(state $S, array &$digest, $pa, $pb) {

    global $padding;

    #uint8_t msglen[8];
    $msglen = array_fill(0, 8, 0);
    #uint32_t lo = S->t[0] + S->buflen, hi = S->t[1];
    $lo = ($S->t[0] + $S->buflen) & 0xffffffff;
    $hi = $S->t[1] & 0xffffffff;
    if ($lo < /* (unsigned) */$S->buflen)
        ++$hi;

    
    $hi &= 0xffffffff;
    $msglen[0] = ($hi >> 24) & 0xff;
    $msglen[1] = ($hi >> 16) & 0xff;
    $msglen[2] = ($hi >> 8) & 0xff;
    $msglen[3] = $hi & 0xff;

    
    $lo &= 0xffffffff;
    $msglen[4] = ($lo >> 24) & 0xff;
    $msglen[5] = ($lo >> 16) & 0xff;
    $msglen[6] = ($lo >> 8) & 0xff;
    $msglen[7] = $lo & 0xff;


    if ($S->buflen == 440) { /* one padding byte */
        $S->t[0] -= 8;
        blake256_update($S, array($pa), 8);
    } else {

        if ($S->buflen < 440) { /* enough space to fill the block  */

            $S->nullt = $S->buflen === 0 ? 1 : $S->nullt;
            $S->t[0] -= 440 - $S->buflen;
            blake256_update($S, $padding, 440 - $S->buflen);
        } else { /* need 2 compressions */
            $S->t[0] -= 512 - $S->buflen;
            blake256_update($S, $padding, 512 - $S->buflen);
            $S->t[0] -= 440;
            #blake256_update($S, $padding + 1, 440);
            blake256_update($S, array_slice($padding, 1), 440);
            $S->nullt = 1;
        }
        blake256_update($S, array($pb), 8);
        $S->t[0] -= 8;
    }
    $S->t[0] -= 64;
    blake256_update($S, $msglen, 64);

    #$digest = array_fill(0, 32, 0);

    
    $S->h[0] &= 0xffffffff;
    $digest[0] = ($S->h[0] >> 24) & 0xff;
    $digest[1] = ($S->h[0] >> 16) & 0xff;
    $digest[2] = ($S->h[0] >> 8) & 0xff;
    $digest[3] = $S->h[0] & 0xff;

    
    $S->h[1] &= 0xffffffff;
    $digest[4] = ($S->h[1] >> 24) & 0xff;
    $digest[5] = ($S->h[1] >> 16) & 0xff;
    $digest[6] = ($S->h[1] >> 8) & 0xff;
    $digest[7] = $S->h[1] & 0xff;

    
    $S->h[2] &= 0xffffffff;
    $digest[8] = ($S->h[2] >> 24) & 0xff;
    $digest[9] = ($S->h[2] >> 16) & 0xff;
    $digest[10] = ($S->h[2] >> 8) & 0xff;
    $digest[11] = $S->h[2] & 0xff;

    
    $S->h[3] &= 0xffffffff;
    $digest[12] = ($S->h[3] >> 24) & 0xff;
    $digest[13] = ($S->h[3] >> 16) & 0xff;
    $digest[14] = ($S->h[3] >> 8) & 0xff;
    $digest[15] = $S->h[3] & 0xff;

    
    $S->h[4] &= 0xffffffff;
    $digest[16] = ($S->h[4] >> 24) & 0xff;
    $digest[17] = ($S->h[4] >> 16) & 0xff;
    $digest[18] = ($S->h[4] >> 8) & 0xff;
    $digest[19] = $S->h[4] & 0xff;

    
    $S->h[5] &= 0xffffffff;
    $digest[20] = ($S->h[5] >> 24) & 0xff;
    $digest[21] = ($S->h[5] >> 16) & 0xff;
    $digest[22] = ($S->h[5] >> 8) & 0xff;
    $digest[23] = $S->h[5] & 0xff;

    
    $S->h[6] &= 0xffffffff;
    $digest[24] = ($S->h[6] >> 24) & 0xff;
    $digest[25] = ($S->h[6] >> 16) & 0xff;
    $digest[26] = ($S->h[6] >> 8) & 0xff;
    $digest[27] = $S->h[6] & 0xff;

    
    $S->h[7] &= 0xffffffff;
    $digest[28] = ($S->h[7] >> 24) & 0xff;
    $digest[29] = ($S->h[7] >> 16) & 0xff;
    $digest[30] = ($S->h[7] >> 8) & 0xff;
    $digest[31] = $S->h[7] & 0xff;

}

/**
 * 
 * @param state $S state *S
 * @param array $digest uint8_t *digest
 */
function blake256_final(state $S, /* uint8_t * */ array &$digest) {
    blake256_final_h($S, $digest, 0x81, 0x01);
}

/**
 * 
 * @param array $out uint8_t *out
 * @param array $in const uint8_t *in
 * @param type $inlen uint64_t inlen = number of bytes
 */
function blake256_hash(/* uint8_t * */array &$out, /* const uint8_t * */ array $in, /* uint64_t */ $inlen) {
    $S = new state;
    blake256_init($S);
    blake256_update($S, $in, $inlen * 8);
    blake256_final($S, $out);
}

/* 1208051793,989430589,2588628151,
 * 281098870,1399103462,2315590707,2872526399,260670745,
  0,0,0,0,
  7680,0,


  $out = array();
  $in = array_fill(0, 72, 0);
  $test1 = array(
  0x0c, 0xe8, 0xd4, 0xef, 0x4d, 0xd7, 0xcd, 0x8d,
  0x62, 0xdf, 0xde, 0xd9, 0xd4, 0xed, 0xb0, 0xa7,
  0x74, 0xae, 0x6a, 0x41, 0x92, 0x9a, 0x74, 0xda,
  0x23, 0x10, 0x9e, 0x8f, 0x11, 0x13, 0x9c, 0x87
  );
  $test2 =
  array(
  0xd4, 0x19, 0xba, 0xd3, 0x2d, 0x50, 0x4f, 0xb7,
  0xd4, 0x4d, 0x46, 0x0c, 0x42, 0xc5, 0x59, 0x3f,
  0xe5, 0x44, 0xfa, 0x4c, 0x13, 0x5d, 0xec, 0x31,
  0xe2, 0x1b, 0xd9, 0xab, 0xdc, 0xc2, 0x2d, 0x41
  );
  blake256_hash($out, $in, 72);
  #var_dump($out);
  #die;
  for ($i = 0; $i < 32; ++$i) {
  printf("%d\t%d\n", $out[$i], $test2[$i]);
  }
 */
#var_dump($hash);


$vects = array(
    array(
        '8f69d890786569cc878e9995a0ebf5e319746482ab56b8184fec5267190e6ade',
        'abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu'
    ),
    array("4181475cb0c22d58ae847e368e91b4669ea2d84bcd55dbf01fe24bae6571dd08",
        'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante hendrerit. Donec et mollis dolor. Praesent et diam eget libero egestas mattis sit amet vitae augue. Nam tincidunt congue enim, ut porta lorem lacinia consectetur. Donec ut libero sed arcu vehicula ultricies a non tortor. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean ut gravida lorem. Ut turpis felis, pulvinar a semper sed, adipiscing id dolor. Pellentesque auctor nisi id magna consequat sagittis. Curabitur dapibus enim sit amet elit pharetra tincidunt feugiat nisl imperdiet. Ut convallis libero in urna ultrices accumsan. Donec sed odio eros. Donec viverra mi quis quam pulvinar at malesuada arcu rhoncus. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. In rutrum accumsan ultricies. Mauris vitae nisi at sem facilisis semper ac in est.',
    ),
    array("7576698ee9cad30173080678e5965916adbb11cb5245d386bf1ffda1cb26c9d7",
        "The quick brown fox jumps over the lazy dog"),
    array("07663e00cf96fbc136cf7b1ee099c95346ba3920893d18cc8851f22ee2e36aa6",
        "BLAKE"),
    array("716f6e863f744b9ac22c97ec7b76ea5f5908bc5b2f67c61510bfc4751384ea7a",
        ""),
    array("18a393b4e62b1887a2edf79a5c5a5464daf5bbb976f4007bea16a73e4c1e198e",
        "'BLAKE wins SHA-3! Hooray!!!' (I have time machine)"),
    array("fd7282ecc105ef201bb94663fc413db1b7696414682090015f17e309b835f1c2",
        "Go"),
    array("1e75db2a709081f853c2229b65fd1558540aa5e7bd17b04b9a4b31989effa711",
        "HELP! I'm trapped in hash!"),
    array("af95fffc7768821b1e08866a2f9f66916762bfc9d71c4acb5fd515f31fd6785a", // test with one padding byte
        "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit amet ipsum mauris. Maecenas congu",
    ),
);

#var_dump(bin2hex(implode('', array_map('chr', array(65,129,71,92,176,194,45,88,174,132,126,54,142,145,180,102,158,162,216,75,205,85,219,240,31,226,75,174,101,113,221,8)))));die;
#4181475cb0c22d58ae847e368e91b4669ea2d84bcd55dbf01fe24bae6571dd08
# Blyead
/* 7 should be.... 65,129,71,92,176,194,45,88,174,132,126,54,142,145,180,102,
 * 158,162,216,75,205,85,219,240,31,226,75,174,101,113,221,8

 * 
 * 
 * string(114) "148,222,123,45,188,9,220,147,226,109,50,6,151,22,
 * 217,31,214,67,134,72,239,104,80,168,178,194,46,243,56,212,113,248"

 * 
 *  */
/*
foreach ($vects as $i => $v) {
    list($hash_x, $data) = $v;

    $o = array();
    blake256_hash($o, array_map('ord', str_split($data)), strlen($data));
    $h = bin2hex(implode('', array_map('chr', $o)));

    if ($h === $hash_x) {
        printf("TEST OK\n");
    } else {
        printf("$i test failed!!!\n");
        var_dump(implode(',', $o));
    }
    #die;
}*/